// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arrow-down-name: 'arrow-down';
$arrow-down-x: 96px;
$arrow-down-y: 26px;
$arrow-down-offset-x: -96px;
$arrow-down-offset-y: -26px;
$arrow-down-width: 6px;
$arrow-down-height: 4px;
$arrow-down-total-width: 122px;
$arrow-down-total-height: 80px;
$arrow-down-image: '../img/sprite.png';
$arrow-down: (96px, 26px, -96px, -26px, 6px, 4px, 122px, 80px, '../img/sprite.png', 'arrow-down', );
$facebook-name: 'facebook';
$facebook-x: 0px;
$facebook-y: 48px;
$facebook-offset-x: 0px;
$facebook-offset-y: -48px;
$facebook-width: 32px;
$facebook-height: 32px;
$facebook-total-width: 122px;
$facebook-total-height: 80px;
$facebook-image: '../img/sprite.png';
$facebook: (0px, 48px, 0px, -48px, 32px, 32px, 122px, 80px, '../img/sprite.png', 'facebook', );
$ico-telegram-name: 'ico-telegram';
$ico-telegram-x: 64px;
$ico-telegram-y: 48px;
$ico-telegram-offset-x: -64px;
$ico-telegram-offset-y: -48px;
$ico-telegram-width: 26px;
$ico-telegram-height: 26px;
$ico-telegram-total-width: 122px;
$ico-telegram-total-height: 80px;
$ico-telegram-image: '../img/sprite.png';
$ico-telegram: (64px, 48px, -64px, -48px, 26px, 26px, 122px, 80px, '../img/sprite.png', 'ico-telegram', );
$ico-viber-name: 'ico-viber';
$ico-viber-x: 96px;
$ico-viber-y: 0px;
$ico-viber-offset-x: -96px;
$ico-viber-offset-y: 0px;
$ico-viber-width: 26px;
$ico-viber-height: 26px;
$ico-viber-total-width: 122px;
$ico-viber-total-height: 80px;
$ico-viber-image: '../img/sprite.png';
$ico-viber: (96px, 0px, -96px, 0px, 26px, 26px, 122px, 80px, '../img/sprite.png', 'ico-viber', );
$skype-name: 'skype';
$skype-x: 0px;
$skype-y: 0px;
$skype-offset-x: 0px;
$skype-offset-y: 0px;
$skype-width: 48px;
$skype-height: 48px;
$skype-total-width: 122px;
$skype-total-height: 80px;
$skype-image: '../img/sprite.png';
$skype: (0px, 0px, 0px, 0px, 48px, 48px, 122px, 80px, '../img/sprite.png', 'skype', );
$vk-name: 'vk';
$vk-x: 48px;
$vk-y: 0px;
$vk-offset-x: -48px;
$vk-offset-y: 0px;
$vk-width: 48px;
$vk-height: 48px;
$vk-total-width: 122px;
$vk-total-height: 80px;
$vk-image: '../img/sprite.png';
$vk: (48px, 0px, -48px, 0px, 48px, 48px, 122px, 80px, '../img/sprite.png', 'vk', );
$vkontakte-name: 'vkontakte';
$vkontakte-x: 32px;
$vkontakte-y: 48px;
$vkontakte-offset-x: -32px;
$vkontakte-offset-y: -48px;
$vkontakte-width: 32px;
$vkontakte-height: 32px;
$vkontakte-total-width: 122px;
$vkontakte-total-height: 80px;
$vkontakte-image: '../img/sprite.png';
$vkontakte: (32px, 48px, -32px, -48px, 32px, 32px, 122px, 80px, '../img/sprite.png', 'vkontakte', );
$spritesheet-width: 122px;
$spritesheet-height: 80px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($arrow-down, $facebook, $ico-telegram, $ico-viber, $skype, $vk, $vkontakte, );
$spritesheet: (122px, 80px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
